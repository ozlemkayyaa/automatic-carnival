// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'app/data/datasources/models/local_models/weather_local_model.dart';
import 'app/data/datasources/models/local_models/weather_local_overview_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 2879407228412763842),
      name: 'WeatherLocalModel',
      lastPropertyId: const obx_int.IdUid(23, 7276490009113928749),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6702037271643084648),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4238342738435976648),
            name: 'dt',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4731339910145275693),
            name: 'dtTxt',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6602397595312049149),
            name: 'temperature',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2251490532685277842),
            name: 'temperatureFeelsLike',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6602647212123034605),
            name: 'dewPointTemperature',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 945850110770429738),
            name: 'temperatureUnit',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1819678313172928597),
            name: 'pressure',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 8122508990899096888),
            name: 'pressureUnit',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 5539320517637636868),
            name: 'humidity',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 6058166342299976936),
            name: 'humidityUnit',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 5568433122297751667),
            name: 'visibility',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 9188387508212310561),
            name: 'visibilityUnit',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 926052710553029810),
            name: 'probabilityOfPrecipitation',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 8254167585529159846),
            name: 'probabilityOfPrecipitationUnit',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 5397567688192632168),
            name: 'uvJson',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 313954800485388106),
            name: 'cloudsJson',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 752630989704399108),
            name: 'rainJson',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 5321379147485613736),
            name: 'snowJson',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 2766278664266237446),
            name: 'windJson',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 1931551568989458418),
            name: 'coordJson',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 8160029842742522755),
            name: 'weatherJson',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 7276490009113928749),
            name: 'dailyJson',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 8668091983976159534),
      name: 'WeatherOverviewLocalModel',
      lastPropertyId: const obx_int.IdUid(7, 2966494932717752183),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3489271219868862491),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2970288077144832615),
            name: 'lat',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 288352224611160300),
            name: 'lon',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3796931490725390866),
            name: 'tz',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2201690001297594626),
            name: 'date',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 942942054133744353),
            name: 'units',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2966494932717752183),
            name: 'weatherOverview',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 8668091983976159534),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    WeatherLocalModel: obx_int.EntityDefinition<WeatherLocalModel>(
        model: _entities[0],
        toOneRelations: (WeatherLocalModel object) => [],
        toManyRelations: (WeatherLocalModel object) => {},
        getId: (WeatherLocalModel object) => object.id,
        setId: (WeatherLocalModel object, int id) {
          object.id = id;
        },
        objectToFB: (WeatherLocalModel object, fb.Builder fbb) {
          final dtTxtOffset =
              object.dtTxt == null ? null : fbb.writeString(object.dtTxt!);
          final temperatureUnitOffset = object.temperatureUnit == null
              ? null
              : fbb.writeString(object.temperatureUnit!);
          final pressureUnitOffset = object.pressureUnit == null
              ? null
              : fbb.writeString(object.pressureUnit!);
          final humidityUnitOffset = object.humidityUnit == null
              ? null
              : fbb.writeString(object.humidityUnit!);
          final visibilityUnitOffset = object.visibilityUnit == null
              ? null
              : fbb.writeString(object.visibilityUnit!);
          final probabilityOfPrecipitationUnitOffset =
              object.probabilityOfPrecipitationUnit == null
                  ? null
                  : fbb.writeString(object.probabilityOfPrecipitationUnit!);
          final uvJsonOffset =
              object.uvJson == null ? null : fbb.writeString(object.uvJson!);
          final cloudsJsonOffset = object.cloudsJson == null
              ? null
              : fbb.writeString(object.cloudsJson!);
          final rainJsonOffset = object.rainJson == null
              ? null
              : fbb.writeString(object.rainJson!);
          final snowJsonOffset = object.snowJson == null
              ? null
              : fbb.writeString(object.snowJson!);
          final windJsonOffset = object.windJson == null
              ? null
              : fbb.writeString(object.windJson!);
          final coordJsonOffset = object.coordJson == null
              ? null
              : fbb.writeString(object.coordJson!);
          final weatherJsonOffset = object.weatherJson == null
              ? null
              : fbb.writeString(object.weatherJson!);
          final dailyJsonOffset = object.dailyJson == null
              ? null
              : fbb.writeString(object.dailyJson!);
          fbb.startTable(24);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.dt);
          fbb.addOffset(2, dtTxtOffset);
          fbb.addFloat64(3, object.temperature);
          fbb.addFloat64(4, object.temperatureFeelsLike);
          fbb.addFloat64(5, object.dewPointTemperature);
          fbb.addOffset(6, temperatureUnitOffset);
          fbb.addInt64(7, object.pressure);
          fbb.addOffset(8, pressureUnitOffset);
          fbb.addInt64(9, object.humidity);
          fbb.addOffset(10, humidityUnitOffset);
          fbb.addInt64(11, object.visibility);
          fbb.addOffset(12, visibilityUnitOffset);
          fbb.addInt64(13, object.probabilityOfPrecipitation);
          fbb.addOffset(14, probabilityOfPrecipitationUnitOffset);
          fbb.addOffset(15, uvJsonOffset);
          fbb.addOffset(16, cloudsJsonOffset);
          fbb.addOffset(17, rainJsonOffset);
          fbb.addOffset(18, snowJsonOffset);
          fbb.addOffset(19, windJsonOffset);
          fbb.addOffset(20, coordJsonOffset);
          fbb.addOffset(21, weatherJsonOffset);
          fbb.addOffset(22, dailyJsonOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final dtParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final dtTxtParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final temperatureParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 10);
          final temperatureFeelsLikeParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 12);
          final dewPointTemperatureParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 14);
          final temperatureUnitParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final pressureParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final pressureUnitParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final humidityParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final humidityUnitParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 24);
          final visibilityParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 26);
          final visibilityUnitParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 28);
          final probabilityOfPrecipitationParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 30);
          final probabilityOfPrecipitationUnitParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 32);
          final uvJsonParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 34);
          final cloudsJsonParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 36);
          final rainJsonParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 38);
          final snowJsonParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 40);
          final windJsonParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 42);
          final coordJsonParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 44);
          final weatherJsonParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 46);
          final dailyJsonParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 48);
          final object = WeatherLocalModel(
              id: idParam,
              dt: dtParam,
              dtTxt: dtTxtParam,
              temperature: temperatureParam,
              temperatureFeelsLike: temperatureFeelsLikeParam,
              dewPointTemperature: dewPointTemperatureParam,
              temperatureUnit: temperatureUnitParam,
              pressure: pressureParam,
              pressureUnit: pressureUnitParam,
              humidity: humidityParam,
              humidityUnit: humidityUnitParam,
              visibility: visibilityParam,
              visibilityUnit: visibilityUnitParam,
              probabilityOfPrecipitation: probabilityOfPrecipitationParam,
              probabilityOfPrecipitationUnit:
                  probabilityOfPrecipitationUnitParam,
              uvJson: uvJsonParam,
              cloudsJson: cloudsJsonParam,
              rainJson: rainJsonParam,
              snowJson: snowJsonParam,
              windJson: windJsonParam,
              coordJson: coordJsonParam,
              weatherJson: weatherJsonParam,
              dailyJson: dailyJsonParam);

          return object;
        }),
    WeatherOverviewLocalModel:
        obx_int.EntityDefinition<WeatherOverviewLocalModel>(
            model: _entities[1],
            toOneRelations: (WeatherOverviewLocalModel object) => [],
            toManyRelations: (WeatherOverviewLocalModel object) => {},
            getId: (WeatherOverviewLocalModel object) => object.id,
            setId: (WeatherOverviewLocalModel object, int id) {
              object.id = id;
            },
            objectToFB: (WeatherOverviewLocalModel object, fb.Builder fbb) {
              final tzOffset = fbb.writeString(object.tz);
              final dateOffset = fbb.writeString(object.date);
              final unitsOffset = fbb.writeString(object.units);
              final weatherOverviewOffset =
                  fbb.writeString(object.weatherOverview);
              fbb.startTable(8);
              fbb.addInt64(0, object.id);
              fbb.addFloat64(1, object.lat);
              fbb.addFloat64(2, object.lon);
              fbb.addOffset(3, tzOffset);
              fbb.addOffset(4, dateOffset);
              fbb.addOffset(5, unitsOffset);
              fbb.addOffset(6, weatherOverviewOffset);
              fbb.finish(fbb.endTable());
              return object.id;
            },
            objectFromFB: (obx.Store store, ByteData fbData) {
              final buffer = fb.BufferContext(fbData);
              final rootOffset = buffer.derefObject(0);
              final idParam =
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
              final latParam =
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0);
              final lonParam =
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
              final tzParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
              final dateParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
              final unitsParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
              final weatherOverviewParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 16, '');
              final object = WeatherOverviewLocalModel(
                  id: idParam,
                  lat: latParam,
                  lon: lonParam,
                  tz: tzParam,
                  date: dateParam,
                  units: unitsParam,
                  weatherOverview: weatherOverviewParam);

              return object;
            })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [WeatherLocalModel] entity fields to define ObjectBox queries.
class WeatherLocalModel_ {
  /// See [WeatherLocalModel.id].
  static final id =
      obx.QueryIntegerProperty<WeatherLocalModel>(_entities[0].properties[0]);

  /// See [WeatherLocalModel.dt].
  static final dt =
      obx.QueryIntegerProperty<WeatherLocalModel>(_entities[0].properties[1]);

  /// See [WeatherLocalModel.dtTxt].
  static final dtTxt =
      obx.QueryStringProperty<WeatherLocalModel>(_entities[0].properties[2]);

  /// See [WeatherLocalModel.temperature].
  static final temperature =
      obx.QueryDoubleProperty<WeatherLocalModel>(_entities[0].properties[3]);

  /// See [WeatherLocalModel.temperatureFeelsLike].
  static final temperatureFeelsLike =
      obx.QueryDoubleProperty<WeatherLocalModel>(_entities[0].properties[4]);

  /// See [WeatherLocalModel.dewPointTemperature].
  static final dewPointTemperature =
      obx.QueryDoubleProperty<WeatherLocalModel>(_entities[0].properties[5]);

  /// See [WeatherLocalModel.temperatureUnit].
  static final temperatureUnit =
      obx.QueryStringProperty<WeatherLocalModel>(_entities[0].properties[6]);

  /// See [WeatherLocalModel.pressure].
  static final pressure =
      obx.QueryIntegerProperty<WeatherLocalModel>(_entities[0].properties[7]);

  /// See [WeatherLocalModel.pressureUnit].
  static final pressureUnit =
      obx.QueryStringProperty<WeatherLocalModel>(_entities[0].properties[8]);

  /// See [WeatherLocalModel.humidity].
  static final humidity =
      obx.QueryIntegerProperty<WeatherLocalModel>(_entities[0].properties[9]);

  /// See [WeatherLocalModel.humidityUnit].
  static final humidityUnit =
      obx.QueryStringProperty<WeatherLocalModel>(_entities[0].properties[10]);

  /// See [WeatherLocalModel.visibility].
  static final visibility =
      obx.QueryIntegerProperty<WeatherLocalModel>(_entities[0].properties[11]);

  /// See [WeatherLocalModel.visibilityUnit].
  static final visibilityUnit =
      obx.QueryStringProperty<WeatherLocalModel>(_entities[0].properties[12]);

  /// See [WeatherLocalModel.probabilityOfPrecipitation].
  static final probabilityOfPrecipitation =
      obx.QueryIntegerProperty<WeatherLocalModel>(_entities[0].properties[13]);

  /// See [WeatherLocalModel.probabilityOfPrecipitationUnit].
  static final probabilityOfPrecipitationUnit =
      obx.QueryStringProperty<WeatherLocalModel>(_entities[0].properties[14]);

  /// See [WeatherLocalModel.uvJson].
  static final uvJson =
      obx.QueryStringProperty<WeatherLocalModel>(_entities[0].properties[15]);

  /// See [WeatherLocalModel.cloudsJson].
  static final cloudsJson =
      obx.QueryStringProperty<WeatherLocalModel>(_entities[0].properties[16]);

  /// See [WeatherLocalModel.rainJson].
  static final rainJson =
      obx.QueryStringProperty<WeatherLocalModel>(_entities[0].properties[17]);

  /// See [WeatherLocalModel.snowJson].
  static final snowJson =
      obx.QueryStringProperty<WeatherLocalModel>(_entities[0].properties[18]);

  /// See [WeatherLocalModel.windJson].
  static final windJson =
      obx.QueryStringProperty<WeatherLocalModel>(_entities[0].properties[19]);

  /// See [WeatherLocalModel.coordJson].
  static final coordJson =
      obx.QueryStringProperty<WeatherLocalModel>(_entities[0].properties[20]);

  /// See [WeatherLocalModel.weatherJson].
  static final weatherJson =
      obx.QueryStringProperty<WeatherLocalModel>(_entities[0].properties[21]);

  /// See [WeatherLocalModel.dailyJson].
  static final dailyJson =
      obx.QueryStringProperty<WeatherLocalModel>(_entities[0].properties[22]);
}

/// [WeatherOverviewLocalModel] entity fields to define ObjectBox queries.
class WeatherOverviewLocalModel_ {
  /// See [WeatherOverviewLocalModel.id].
  static final id = obx.QueryIntegerProperty<WeatherOverviewLocalModel>(
      _entities[1].properties[0]);

  /// See [WeatherOverviewLocalModel.lat].
  static final lat = obx.QueryDoubleProperty<WeatherOverviewLocalModel>(
      _entities[1].properties[1]);

  /// See [WeatherOverviewLocalModel.lon].
  static final lon = obx.QueryDoubleProperty<WeatherOverviewLocalModel>(
      _entities[1].properties[2]);

  /// See [WeatherOverviewLocalModel.tz].
  static final tz = obx.QueryStringProperty<WeatherOverviewLocalModel>(
      _entities[1].properties[3]);

  /// See [WeatherOverviewLocalModel.date].
  static final date = obx.QueryStringProperty<WeatherOverviewLocalModel>(
      _entities[1].properties[4]);

  /// See [WeatherOverviewLocalModel.units].
  static final units = obx.QueryStringProperty<WeatherOverviewLocalModel>(
      _entities[1].properties[5]);

  /// See [WeatherOverviewLocalModel.weatherOverview].
  static final weatherOverview =
      obx.QueryStringProperty<WeatherOverviewLocalModel>(
          _entities[1].properties[6]);
}
